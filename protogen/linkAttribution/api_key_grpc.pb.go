// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: LinkAttributionProto/api_key.proto

package linkAttribution

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiKeyServiceClient is the client API for ApiKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiKeyServiceClient interface {
	ApiKeyGetCurrentKey(ctx context.Context, in *ApiKeyGetCurrentKeyRequest, opts ...grpc.CallOption) (*ApiKeyGetCurrentKeyResponse, error)
	ApiKeyReGenerateKey(ctx context.Context, in *ApiKeyReGenerateKeyRequest, opts ...grpc.CallOption) (*ApiKeyGenerateKeyResponse, error)
	ApiKeyReGenerateSecret(ctx context.Context, in *ApiKeyReGenerateKeyRequest, opts ...grpc.CallOption) (*ApiKeyGenerateKeyResponse, error)
}

type apiKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiKeyServiceClient(cc grpc.ClientConnInterface) ApiKeyServiceClient {
	return &apiKeyServiceClient{cc}
}

func (c *apiKeyServiceClient) ApiKeyGetCurrentKey(ctx context.Context, in *ApiKeyGetCurrentKeyRequest, opts ...grpc.CallOption) (*ApiKeyGetCurrentKeyResponse, error) {
	out := new(ApiKeyGetCurrentKeyResponse)
	err := c.cc.Invoke(ctx, "/apiKeyPkg.ApiKeyService/ApiKeyGetCurrentKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) ApiKeyReGenerateKey(ctx context.Context, in *ApiKeyReGenerateKeyRequest, opts ...grpc.CallOption) (*ApiKeyGenerateKeyResponse, error) {
	out := new(ApiKeyGenerateKeyResponse)
	err := c.cc.Invoke(ctx, "/apiKeyPkg.ApiKeyService/ApiKeyReGenerateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) ApiKeyReGenerateSecret(ctx context.Context, in *ApiKeyReGenerateKeyRequest, opts ...grpc.CallOption) (*ApiKeyGenerateKeyResponse, error) {
	out := new(ApiKeyGenerateKeyResponse)
	err := c.cc.Invoke(ctx, "/apiKeyPkg.ApiKeyService/ApiKeyReGenerateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiKeyServiceServer is the server API for ApiKeyService service.
// All implementations must embed UnimplementedApiKeyServiceServer
// for forward compatibility
type ApiKeyServiceServer interface {
	ApiKeyGetCurrentKey(context.Context, *ApiKeyGetCurrentKeyRequest) (*ApiKeyGetCurrentKeyResponse, error)
	ApiKeyReGenerateKey(context.Context, *ApiKeyReGenerateKeyRequest) (*ApiKeyGenerateKeyResponse, error)
	ApiKeyReGenerateSecret(context.Context, *ApiKeyReGenerateKeyRequest) (*ApiKeyGenerateKeyResponse, error)
	mustEmbedUnimplementedApiKeyServiceServer()
}

// UnimplementedApiKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiKeyServiceServer struct {
}

func (UnimplementedApiKeyServiceServer) ApiKeyGetCurrentKey(context.Context, *ApiKeyGetCurrentKeyRequest) (*ApiKeyGetCurrentKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiKeyGetCurrentKey not implemented")
}
func (UnimplementedApiKeyServiceServer) ApiKeyReGenerateKey(context.Context, *ApiKeyReGenerateKeyRequest) (*ApiKeyGenerateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiKeyReGenerateKey not implemented")
}
func (UnimplementedApiKeyServiceServer) ApiKeyReGenerateSecret(context.Context, *ApiKeyReGenerateKeyRequest) (*ApiKeyGenerateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiKeyReGenerateSecret not implemented")
}
func (UnimplementedApiKeyServiceServer) mustEmbedUnimplementedApiKeyServiceServer() {}

// UnsafeApiKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiKeyServiceServer will
// result in compilation errors.
type UnsafeApiKeyServiceServer interface {
	mustEmbedUnimplementedApiKeyServiceServer()
}

func RegisterApiKeyServiceServer(s grpc.ServiceRegistrar, srv ApiKeyServiceServer) {
	s.RegisterService(&ApiKeyService_ServiceDesc, srv)
}

func _ApiKeyService_ApiKeyGetCurrentKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiKeyGetCurrentKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).ApiKeyGetCurrentKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiKeyPkg.ApiKeyService/ApiKeyGetCurrentKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).ApiKeyGetCurrentKey(ctx, req.(*ApiKeyGetCurrentKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_ApiKeyReGenerateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiKeyReGenerateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).ApiKeyReGenerateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiKeyPkg.ApiKeyService/ApiKeyReGenerateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).ApiKeyReGenerateKey(ctx, req.(*ApiKeyReGenerateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_ApiKeyReGenerateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiKeyReGenerateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).ApiKeyReGenerateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiKeyPkg.ApiKeyService/ApiKeyReGenerateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).ApiKeyReGenerateSecret(ctx, req.(*ApiKeyReGenerateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiKeyService_ServiceDesc is the grpc.ServiceDesc for ApiKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiKeyPkg.ApiKeyService",
	HandlerType: (*ApiKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiKeyGetCurrentKey",
			Handler:    _ApiKeyService_ApiKeyGetCurrentKey_Handler,
		},
		{
			MethodName: "ApiKeyReGenerateKey",
			Handler:    _ApiKeyService_ApiKeyReGenerateKey_Handler,
		},
		{
			MethodName: "ApiKeyReGenerateSecret",
			Handler:    _ApiKeyService_ApiKeyReGenerateSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "LinkAttributionProto/api_key.proto",
}
