// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: LinkAttributionProto/link_attribution.proto

package linkAttribution

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkAttributionClient is the client API for LinkAttribution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkAttributionClient interface {
	AppCreate(ctx context.Context, in *AppCreateRequest, opts ...grpc.CallOption) (*UpsertResponse, error)
	AppList(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppListResponse, error)
	AppDetail(ctx context.Context, in *AppDetailRequest, opts ...grpc.CallOption) (*AppDetailResponse, error)
	AppDetailByDomain(ctx context.Context, in *AppDetailByDomainRequest, opts ...grpc.CallOption) (*AppDetailResponse, error)
	ApiGetCurrentKey(ctx context.Context, in *ApiGetCurrentKeyRequest, opts ...grpc.CallOption) (*AppDetailResponse, error)
	ConfigurationUpdate(ctx context.Context, in *ConfigurationUpdateRequest, opts ...grpc.CallOption) (*UpsertResponse, error)
	ConfigurationDetail(ctx context.Context, in *ConfigurationDetailRequest, opts ...grpc.CallOption) (*ConfigurationDetailResponse, error)
	LinksBulkCreate(ctx context.Context, in *LinksBulkCreateRequest, opts ...grpc.CallOption) (*UpsertListResponse, error)
}

type linkAttributionClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkAttributionClient(cc grpc.ClientConnInterface) LinkAttributionClient {
	return &linkAttributionClient{cc}
}

func (c *linkAttributionClient) AppCreate(ctx context.Context, in *AppCreateRequest, opts ...grpc.CallOption) (*UpsertResponse, error) {
	out := new(UpsertResponse)
	err := c.cc.Invoke(ctx, "/chat.LinkAttribution/AppCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkAttributionClient) AppList(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppListResponse, error) {
	out := new(AppListResponse)
	err := c.cc.Invoke(ctx, "/chat.LinkAttribution/AppList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkAttributionClient) AppDetail(ctx context.Context, in *AppDetailRequest, opts ...grpc.CallOption) (*AppDetailResponse, error) {
	out := new(AppDetailResponse)
	err := c.cc.Invoke(ctx, "/chat.LinkAttribution/AppDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkAttributionClient) AppDetailByDomain(ctx context.Context, in *AppDetailByDomainRequest, opts ...grpc.CallOption) (*AppDetailResponse, error) {
	out := new(AppDetailResponse)
	err := c.cc.Invoke(ctx, "/chat.LinkAttribution/AppDetailByDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkAttributionClient) ApiGetCurrentKey(ctx context.Context, in *ApiGetCurrentKeyRequest, opts ...grpc.CallOption) (*AppDetailResponse, error) {
	out := new(AppDetailResponse)
	err := c.cc.Invoke(ctx, "/chat.LinkAttribution/ApiGetCurrentKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkAttributionClient) ConfigurationUpdate(ctx context.Context, in *ConfigurationUpdateRequest, opts ...grpc.CallOption) (*UpsertResponse, error) {
	out := new(UpsertResponse)
	err := c.cc.Invoke(ctx, "/chat.LinkAttribution/ConfigurationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkAttributionClient) ConfigurationDetail(ctx context.Context, in *ConfigurationDetailRequest, opts ...grpc.CallOption) (*ConfigurationDetailResponse, error) {
	out := new(ConfigurationDetailResponse)
	err := c.cc.Invoke(ctx, "/chat.LinkAttribution/ConfigurationDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkAttributionClient) LinksBulkCreate(ctx context.Context, in *LinksBulkCreateRequest, opts ...grpc.CallOption) (*UpsertListResponse, error) {
	out := new(UpsertListResponse)
	err := c.cc.Invoke(ctx, "/chat.LinkAttribution/LinksBulkCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkAttributionServer is the server API for LinkAttribution service.
// All implementations must embed UnimplementedLinkAttributionServer
// for forward compatibility
type LinkAttributionServer interface {
	AppCreate(context.Context, *AppCreateRequest) (*UpsertResponse, error)
	AppList(context.Context, *AppListRequest) (*AppListResponse, error)
	AppDetail(context.Context, *AppDetailRequest) (*AppDetailResponse, error)
	AppDetailByDomain(context.Context, *AppDetailByDomainRequest) (*AppDetailResponse, error)
	ApiGetCurrentKey(context.Context, *ApiGetCurrentKeyRequest) (*AppDetailResponse, error)
	ConfigurationUpdate(context.Context, *ConfigurationUpdateRequest) (*UpsertResponse, error)
	ConfigurationDetail(context.Context, *ConfigurationDetailRequest) (*ConfigurationDetailResponse, error)
	LinksBulkCreate(context.Context, *LinksBulkCreateRequest) (*UpsertListResponse, error)
	mustEmbedUnimplementedLinkAttributionServer()
}

// UnimplementedLinkAttributionServer must be embedded to have forward compatible implementations.
type UnimplementedLinkAttributionServer struct {
}

func (UnimplementedLinkAttributionServer) AppCreate(context.Context, *AppCreateRequest) (*UpsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppCreate not implemented")
}
func (UnimplementedLinkAttributionServer) AppList(context.Context, *AppListRequest) (*AppListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppList not implemented")
}
func (UnimplementedLinkAttributionServer) AppDetail(context.Context, *AppDetailRequest) (*AppDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppDetail not implemented")
}
func (UnimplementedLinkAttributionServer) AppDetailByDomain(context.Context, *AppDetailByDomainRequest) (*AppDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppDetailByDomain not implemented")
}
func (UnimplementedLinkAttributionServer) ApiGetCurrentKey(context.Context, *ApiGetCurrentKeyRequest) (*AppDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiGetCurrentKey not implemented")
}
func (UnimplementedLinkAttributionServer) ConfigurationUpdate(context.Context, *ConfigurationUpdateRequest) (*UpsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurationUpdate not implemented")
}
func (UnimplementedLinkAttributionServer) ConfigurationDetail(context.Context, *ConfigurationDetailRequest) (*ConfigurationDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurationDetail not implemented")
}
func (UnimplementedLinkAttributionServer) LinksBulkCreate(context.Context, *LinksBulkCreateRequest) (*UpsertListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinksBulkCreate not implemented")
}
func (UnimplementedLinkAttributionServer) mustEmbedUnimplementedLinkAttributionServer() {}

// UnsafeLinkAttributionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkAttributionServer will
// result in compilation errors.
type UnsafeLinkAttributionServer interface {
	mustEmbedUnimplementedLinkAttributionServer()
}

func RegisterLinkAttributionServer(s grpc.ServiceRegistrar, srv LinkAttributionServer) {
	s.RegisterService(&LinkAttribution_ServiceDesc, srv)
}

func _LinkAttribution_AppCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkAttributionServer).AppCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.LinkAttribution/AppCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkAttributionServer).AppCreate(ctx, req.(*AppCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkAttribution_AppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkAttributionServer).AppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.LinkAttribution/AppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkAttributionServer).AppList(ctx, req.(*AppListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkAttribution_AppDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkAttributionServer).AppDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.LinkAttribution/AppDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkAttributionServer).AppDetail(ctx, req.(*AppDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkAttribution_AppDetailByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDetailByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkAttributionServer).AppDetailByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.LinkAttribution/AppDetailByDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkAttributionServer).AppDetailByDomain(ctx, req.(*AppDetailByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkAttribution_ApiGetCurrentKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiGetCurrentKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkAttributionServer).ApiGetCurrentKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.LinkAttribution/ApiGetCurrentKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkAttributionServer).ApiGetCurrentKey(ctx, req.(*ApiGetCurrentKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkAttribution_ConfigurationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkAttributionServer).ConfigurationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.LinkAttribution/ConfigurationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkAttributionServer).ConfigurationUpdate(ctx, req.(*ConfigurationUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkAttribution_ConfigurationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkAttributionServer).ConfigurationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.LinkAttribution/ConfigurationDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkAttributionServer).ConfigurationDetail(ctx, req.(*ConfigurationDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkAttribution_LinksBulkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinksBulkCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkAttributionServer).LinksBulkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.LinkAttribution/LinksBulkCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkAttributionServer).LinksBulkCreate(ctx, req.(*LinksBulkCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkAttribution_ServiceDesc is the grpc.ServiceDesc for LinkAttribution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkAttribution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.LinkAttribution",
	HandlerType: (*LinkAttributionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppCreate",
			Handler:    _LinkAttribution_AppCreate_Handler,
		},
		{
			MethodName: "AppList",
			Handler:    _LinkAttribution_AppList_Handler,
		},
		{
			MethodName: "AppDetail",
			Handler:    _LinkAttribution_AppDetail_Handler,
		},
		{
			MethodName: "AppDetailByDomain",
			Handler:    _LinkAttribution_AppDetailByDomain_Handler,
		},
		{
			MethodName: "ApiGetCurrentKey",
			Handler:    _LinkAttribution_ApiGetCurrentKey_Handler,
		},
		{
			MethodName: "ConfigurationUpdate",
			Handler:    _LinkAttribution_ConfigurationUpdate_Handler,
		},
		{
			MethodName: "ConfigurationDetail",
			Handler:    _LinkAttribution_ConfigurationDetail_Handler,
		},
		{
			MethodName: "LinksBulkCreate",
			Handler:    _LinkAttribution_LinksBulkCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "LinkAttributionProto/link_attribution.proto",
}
