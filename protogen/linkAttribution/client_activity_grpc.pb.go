// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: LinkAttributionProto/client_activity.proto

package linkAttribution

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientActivityServiceClient is the client API for ClientActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientActivityServiceClient interface {
	ClientActivityCreate(ctx context.Context, in *ClientActivityCreateRequest, opts ...grpc.CallOption) (*ClientActivityUpsertResponse, error)
}

type clientActivityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientActivityServiceClient(cc grpc.ClientConnInterface) ClientActivityServiceClient {
	return &clientActivityServiceClient{cc}
}

func (c *clientActivityServiceClient) ClientActivityCreate(ctx context.Context, in *ClientActivityCreateRequest, opts ...grpc.CallOption) (*ClientActivityUpsertResponse, error) {
	out := new(ClientActivityUpsertResponse)
	err := c.cc.Invoke(ctx, "/chat.ClientActivityService/ClientActivityCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientActivityServiceServer is the server API for ClientActivityService service.
// All implementations must embed UnimplementedClientActivityServiceServer
// for forward compatibility
type ClientActivityServiceServer interface {
	ClientActivityCreate(context.Context, *ClientActivityCreateRequest) (*ClientActivityUpsertResponse, error)
	mustEmbedUnimplementedClientActivityServiceServer()
}

// UnimplementedClientActivityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientActivityServiceServer struct {
}

func (UnimplementedClientActivityServiceServer) ClientActivityCreate(context.Context, *ClientActivityCreateRequest) (*ClientActivityUpsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientActivityCreate not implemented")
}
func (UnimplementedClientActivityServiceServer) mustEmbedUnimplementedClientActivityServiceServer() {}

// UnsafeClientActivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientActivityServiceServer will
// result in compilation errors.
type UnsafeClientActivityServiceServer interface {
	mustEmbedUnimplementedClientActivityServiceServer()
}

func RegisterClientActivityServiceServer(s grpc.ServiceRegistrar, srv ClientActivityServiceServer) {
	s.RegisterService(&ClientActivityService_ServiceDesc, srv)
}

func _ClientActivityService_ClientActivityCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientActivityCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientActivityServiceServer).ClientActivityCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ClientActivityService/ClientActivityCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientActivityServiceServer).ClientActivityCreate(ctx, req.(*ClientActivityCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientActivityService_ServiceDesc is the grpc.ServiceDesc for ClientActivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientActivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ClientActivityService",
	HandlerType: (*ClientActivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientActivityCreate",
			Handler:    _ClientActivityService_ClientActivityCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "LinkAttributionProto/client_activity.proto",
}
