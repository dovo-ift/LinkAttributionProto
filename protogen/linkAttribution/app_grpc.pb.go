// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: LinkAttributionProto/app.proto

package linkAttribution

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServiceClient interface {
	AppCreate(ctx context.Context, in *AppCreateRequest, opts ...grpc.CallOption) (*AppUpsertResponse, error)
	AppList(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppListResponse, error)
	AppDetail(ctx context.Context, in *AppDetailRequest, opts ...grpc.CallOption) (*AppDetailResponse, error)
	AppDetailByDomain(ctx context.Context, in *AppDetailByDomainRequest, opts ...grpc.CallOption) (*AppDetailResponse, error)
	AppUpdate(ctx context.Context, in *AppUpdateRequest, opts ...grpc.CallOption) (*AppUpsertResponse, error)
	AppDetailByApiKey(ctx context.Context, in *AppDetailByApiKeyRequest, opts ...grpc.CallOption) (*AppDetailResponse, error)
	AppRemove(ctx context.Context, in *AppRemoveRequest, opts ...grpc.CallOption) (*AppUpsertResponse, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) AppCreate(ctx context.Context, in *AppCreateRequest, opts ...grpc.CallOption) (*AppUpsertResponse, error) {
	out := new(AppUpsertResponse)
	err := c.cc.Invoke(ctx, "/chat.AppService/AppCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) AppList(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppListResponse, error) {
	out := new(AppListResponse)
	err := c.cc.Invoke(ctx, "/chat.AppService/AppList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) AppDetail(ctx context.Context, in *AppDetailRequest, opts ...grpc.CallOption) (*AppDetailResponse, error) {
	out := new(AppDetailResponse)
	err := c.cc.Invoke(ctx, "/chat.AppService/AppDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) AppDetailByDomain(ctx context.Context, in *AppDetailByDomainRequest, opts ...grpc.CallOption) (*AppDetailResponse, error) {
	out := new(AppDetailResponse)
	err := c.cc.Invoke(ctx, "/chat.AppService/AppDetailByDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) AppUpdate(ctx context.Context, in *AppUpdateRequest, opts ...grpc.CallOption) (*AppUpsertResponse, error) {
	out := new(AppUpsertResponse)
	err := c.cc.Invoke(ctx, "/chat.AppService/AppUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) AppDetailByApiKey(ctx context.Context, in *AppDetailByApiKeyRequest, opts ...grpc.CallOption) (*AppDetailResponse, error) {
	out := new(AppDetailResponse)
	err := c.cc.Invoke(ctx, "/chat.AppService/AppDetailByApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) AppRemove(ctx context.Context, in *AppRemoveRequest, opts ...grpc.CallOption) (*AppUpsertResponse, error) {
	out := new(AppUpsertResponse)
	err := c.cc.Invoke(ctx, "/chat.AppService/AppRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations must embed UnimplementedAppServiceServer
// for forward compatibility
type AppServiceServer interface {
	AppCreate(context.Context, *AppCreateRequest) (*AppUpsertResponse, error)
	AppList(context.Context, *AppListRequest) (*AppListResponse, error)
	AppDetail(context.Context, *AppDetailRequest) (*AppDetailResponse, error)
	AppDetailByDomain(context.Context, *AppDetailByDomainRequest) (*AppDetailResponse, error)
	AppUpdate(context.Context, *AppUpdateRequest) (*AppUpsertResponse, error)
	AppDetailByApiKey(context.Context, *AppDetailByApiKeyRequest) (*AppDetailResponse, error)
	AppRemove(context.Context, *AppRemoveRequest) (*AppUpsertResponse, error)
	mustEmbedUnimplementedAppServiceServer()
}

// UnimplementedAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppServiceServer struct {
}

func (UnimplementedAppServiceServer) AppCreate(context.Context, *AppCreateRequest) (*AppUpsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppCreate not implemented")
}
func (UnimplementedAppServiceServer) AppList(context.Context, *AppListRequest) (*AppListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppList not implemented")
}
func (UnimplementedAppServiceServer) AppDetail(context.Context, *AppDetailRequest) (*AppDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppDetail not implemented")
}
func (UnimplementedAppServiceServer) AppDetailByDomain(context.Context, *AppDetailByDomainRequest) (*AppDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppDetailByDomain not implemented")
}
func (UnimplementedAppServiceServer) AppUpdate(context.Context, *AppUpdateRequest) (*AppUpsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppUpdate not implemented")
}
func (UnimplementedAppServiceServer) AppDetailByApiKey(context.Context, *AppDetailByApiKeyRequest) (*AppDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppDetailByApiKey not implemented")
}
func (UnimplementedAppServiceServer) AppRemove(context.Context, *AppRemoveRequest) (*AppUpsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRemove not implemented")
}
func (UnimplementedAppServiceServer) mustEmbedUnimplementedAppServiceServer() {}

// UnsafeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServiceServer will
// result in compilation errors.
type UnsafeAppServiceServer interface {
	mustEmbedUnimplementedAppServiceServer()
}

func RegisterAppServiceServer(s grpc.ServiceRegistrar, srv AppServiceServer) {
	s.RegisterService(&AppService_ServiceDesc, srv)
}

func _AppService_AppCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AppCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.AppService/AppCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AppCreate(ctx, req.(*AppCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_AppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.AppService/AppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AppList(ctx, req.(*AppListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_AppDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AppDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.AppService/AppDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AppDetail(ctx, req.(*AppDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_AppDetailByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDetailByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AppDetailByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.AppService/AppDetailByDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AppDetailByDomain(ctx, req.(*AppDetailByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_AppUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AppUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.AppService/AppUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AppUpdate(ctx, req.(*AppUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_AppDetailByApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDetailByApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AppDetailByApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.AppService/AppDetailByApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AppDetailByApiKey(ctx, req.(*AppDetailByApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_AppRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).AppRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.AppService/AppRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).AppRemove(ctx, req.(*AppRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppService_ServiceDesc is the grpc.ServiceDesc for AppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppCreate",
			Handler:    _AppService_AppCreate_Handler,
		},
		{
			MethodName: "AppList",
			Handler:    _AppService_AppList_Handler,
		},
		{
			MethodName: "AppDetail",
			Handler:    _AppService_AppDetail_Handler,
		},
		{
			MethodName: "AppDetailByDomain",
			Handler:    _AppService_AppDetailByDomain_Handler,
		},
		{
			MethodName: "AppUpdate",
			Handler:    _AppService_AppUpdate_Handler,
		},
		{
			MethodName: "AppDetailByApiKey",
			Handler:    _AppService_AppDetailByApiKey_Handler,
		},
		{
			MethodName: "AppRemove",
			Handler:    _AppService_AppRemove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "LinkAttributionProto/app.proto",
}
